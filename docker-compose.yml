version: "3.9"

services:
  # --- Zookeeper ---
  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  # --- Kafka ---
  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  # --- ClickHouse ---
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: clickhouse
    restart: unless-stopped
    ports:
      - "8123:8123"   # HTTP
      - "9000:9000"   # Native TCP
    environment:
      - CLICKHOUSE_DB=piccha
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=
    volumes:
      - ./docker/clickhouse/users.xml:/etc/clickhouse-server/users.xml:ro
      - ./docker/clickhouse/init_clickhouse.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - clickhouse_data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  # --- Kafka Publisher (из /data в Kafka) ---
  kafka-publisher:
    build:
      context: .
      dockerfile: docker/python.Dockerfile
    container_name: kafka-publisher
    depends_on:
      - kafka
    restart: "no"
    volumes:
      - ./scripts:/app/scripts
      - ./data:/app/data
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - KAFKA_MASK_KEY=super-secret-key
    command: python /app/scripts/kafka_publisher.py

  # --- Kafka Consumer (Kafka → ClickHouse) ---
  kafka-to-clickhouse:
    build:
      context: .
      dockerfile: docker/python.Dockerfile
    container_name: kafka-to-clickhouse
    depends_on:
      - kafka
      - clickhouse
    restart: unless-stopped
    volumes:
      - ./scripts:/app/scripts
    environment:
      - KAFKA_BOOTSTRAP=kafka:9092
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=8123
    command: python /app/scripts/kafka_to_clickhouse.py

  # --- Grafana ---
  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - clickhouse

  # --- MinIO ---
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    ports:
      - "9002:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  # --- Postgres (Airflow metadata) ---
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # --- Airflow ---
  airflow:
    build:
      context: ./docker/airflow
      dockerfile: Dockerfile.airflow
    container_name: airflow
    restart: unless-stopped
    depends_on:
      - postgres
      - clickhouse
      - minio
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE=Europe/Moscow
    volumes:
      - ./docker/airflow/dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts:ro
      - ./docker/airflow/logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: >
      bash -c "
        echo 'Waiting for Postgres...' &&
        until pg_isready -h postgres -p 5432; do sleep 2; done &&
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin || true &&
        airflow scheduler & exec airflow webserver
      "

volumes:
  clickhouse_data:
  grafana_data:
  minio_data:
  postgres_data:
